import fs from 'fs';
import path from 'path';
import os from 'os';
import config from '../config/config.js';
import chalk from 'chalk';

// üïì Format uptime nicely
function formatUptime(seconds) {
  const hrs = Math.floor(seconds / 3600);
  const mins = Math.floor((seconds % 3600) / 60);
  const secs = Math.floor(seconds % 60);
  return `${hrs}h ${mins}m ${secs}s`;
}

export default async function alive(sock, remoteJid) {
  const runtime = formatUptime(process.uptime());
  const logoPath = path.resolve(config.image);

  if (!fs.existsSync(logoPath)) {
    console.log(chalk.red('‚ö†Ô∏è Logo not found at ' + logoPath));
  }

  const frames = [
    '‚ö° Saitama MD is booting...',
    '‚ö° Saitama MD is online...',
    '‚ö° Saitama MD is fully operational!',
  ];

  for (let i = 0; i < frames.length; i++) {
    await sock.sendMessage(remoteJid, {
      image: fs.existsSync(logoPath) ? { url: logoPath } : undefined,
      caption: `‚ï≠‚îÅ‚îÅ‚îÅ„Äî üëä *Ôº≥Ôº°Ôº©Ôº¥Ôº°Ôº≠Ôº°  ùó†ùóó* üëä „Äï‚îÅ‚îÅ‚îÅ‚ïÆ
‚îÉ ‚öôÔ∏è Version: ${config.version}
‚îÉ ‚è∞ Uptime: ${runtime}
‚îÉ üëë Owner: ${config.ownerName}
‚îÉ üåç Platform: ${os.platform().toUpperCase()}
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïØ
${frames[i]}`
    });
    await new Promise(r => setTimeout(r, 400)); // animation effect
  }
}
